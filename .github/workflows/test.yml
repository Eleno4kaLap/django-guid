name: test

on: pull_request

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: snok/.github/workflows/linting@main
        env:
          SKIP: rst

  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-matrix: ${{ steps.get-python-versions-action.outputs.latest-python-versions }}
    steps:
    - uses: snok/latest-python-versions@v1
      id: get-python-versions-action
      with:
        min-version: 3.7
        include-prereleases: true

  test:
    needs: [linting, get-python-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.python-matrix) }}
        django-version: [ "3.1.1", "3.1.2", "3.1.3", "3.1.4", "3.2" ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-6
      - name: Install dependencies
        run: pip install pip -U && poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Install django ${{ matrix.django-version }}
        run: |
          poetry run pip install "Django==${{ matrix.django-version }}"
      - name: Run tests
        run: |
          poetry run pytest --cov=django_guid tests/
          poetry run coverage report
